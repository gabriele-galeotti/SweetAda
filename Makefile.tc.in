
#
# Toolchain sub-Makefile
#
# Copyright (C) 2020-2023 Gabriele Galeotti
#
# This work is licensed under the terms of the MIT License.
# Please consult the LICENSE.txt file located in the top-level directory.
#

#
# Environment variables:
# OSTYPE
# PATH
# EXEEXT
# SCREXT
# VERBOSE
# RTS_GOAL
# PLATFORM_GOALS
# MAKECMDGOALS
# SWEETADA_PATH
# TOOLCHAIN_PREFIX
# TOOLCHAIN_NAME
# RTS_DIRECTORY
# RTS_BASE_PATH
# RTS
# ADA_MODE
# STACK_LIMIT
# BUILD_MODE
# OPTIMIZATION_LEVEL
# OBJECT_DIRECTORY
# KERNEL_BASENAME
# GNATADC_FILENAME
# GCC_WRAPPER
# GNAT_WRAPPER
# USE_UNPREFIXED_GNATMAKE
# USE_LIBEXEC_LD
# ENABLE_SPLIT_DWARF
# DISABLE_STACK_USAGE
#

################################################################################
#                                                                              #
# Toolchain initialization.                                                    #
#                                                                              #
################################################################################

ifneq ($(TOOLCHAIN_NAME),)
TOOLCHAIN_PROGRAM_PREFIX := $(TOOLCHAIN_NAME)-
endif

# generic command line compiler executable used to retrieve informations
# NOTE: this is not the same as TOOLCHAIN_CC, which is used to compile source
# files
TOOLCHAIN_GCC := $(TOOLCHAIN_PROGRAM_PREFIX)gcc$(EXEEXT)

# these must be computed after configuration variables are set; different
# options could lead to different multilib library directories
# GCC_MULTIDIR is the multilib directory inside the library search directory
# NOTE: this is different from "-print-multi-lib", which prints all multilibs
ifeq ($(OSTYPE),cmd)
GCC_MULTILIBS   := $(shell SET "PATH=$(PATH)" && $(TOOLCHAIN_GCC) -print-multi-lib 2> nul)
GCC_MULTIDIR    := $(shell SET "PATH=$(PATH)" && $(TOOLCHAIN_GCC) $(GCC_SWITCHES_PLATFORM) -print-multi-directory 2> nul)
LIBGCC_FILENAME := $(shell SET "PATH=$(PATH)" && $(TOOLCHAIN_GCC) $(GCC_SWITCHES_PLATFORM) -print-libgcc-file-name 2> nul)
else
GCC_MULTILIBS   := $(shell PATH="$(PATH)" $(TOOLCHAIN_GCC) -print-multi-lib 2> /dev/null)
GCC_MULTIDIR    := $(shell PATH="$(PATH)" $(TOOLCHAIN_GCC) $(GCC_SWITCHES_PLATFORM) -print-multi-directory 2> /dev/null)
LIBGCC_FILENAME := $(shell PATH="$(PATH)" $(TOOLCHAIN_GCC) $(GCC_SWITCHES_PLATFORM) -print-libgcc-file-name 2> /dev/null)
endif

# detect GCC compiler
ifeq ($(OSTYPE),cmd)
GCC_VERSION := $(shell SET "PATH=$(PATH)" && $(TOOLCHAIN_GCC) -dumpversion 2> nul)
else
GCC_VERSION := $(shell PATH="$(PATH)" $(TOOLCHAIN_GCC) -dumpversion 2> /dev/null)
endif
ifeq ($(GCC_VERSION),)
# no valid toolchain found, output a warning message
ifneq ($(filter $(RTS_GOAL) $(PLATFORM_GOALS),$(MAKECMDGOALS)),)
$(warning *** Warning: no valid toolchain.)
endif
endif

# detect GNATMAKE
GNATMAKE_PROBE := $(TOOLCHAIN_PROGRAM_PREFIX)gnatmake$(EXEEXT)
ifeq ($(OSTYPE),cmd)
GNATMAKE_VERSION := $(shell SET "PATH=$(PATH)" && $(GNATMAKE_PROBE) --version 2> nul|$(SED) -e "2,$$d")
else
GNATMAKE_VERSION := $(shell PATH="$(PATH)" $(GNATMAKE_PROBE) --version 2> /dev/null | $(SED) -e "2,\$$d")
endif
ifeq ($(GNATMAKE_VERSION),)
USE_UNPREFIXED_GNATMAKE := Y
endif

# GPRbuild executable
GPRBUILD := gprbuild$(EXEEXT)

################################################################################
#                                                                              #
# Define toolchain components.                                                 #
#                                                                              #
################################################################################

# basic toolchain executables
TOOLCHAIN_AS       := $(TOOLCHAIN_PROGRAM_PREFIX)as$(EXEEXT)
TOOLCHAIN_ADAC     := $(TOOLCHAIN_PROGRAM_PREFIX)gcc$(EXEEXT)
TOOLCHAIN_CC       := $(TOOLCHAIN_PROGRAM_PREFIX)gcc$(EXEEXT)
TOOLCHAIN_CPP      := $(TOOLCHAIN_PROGRAM_PREFIX)cpp$(EXEEXT)
TOOLCHAIN_GNATCHOP := $(TOOLCHAIN_PROGRAM_PREFIX)gnatchop$(EXEEXT)
TOOLCHAIN_GNATLS   := $(TOOLCHAIN_PROGRAM_PREFIX)gnatls$(EXEEXT)
ifeq ($(USE_UNPREFIXED_GNATMAKE),Y)
TOOLCHAIN_GNATMAKE := gnatmake$(EXEEXT)
else
TOOLCHAIN_GNATMAKE := $(TOOLCHAIN_PROGRAM_PREFIX)gnatmake$(EXEEXT)
endif
TOOLCHAIN_GNATBIND := $(TOOLCHAIN_PROGRAM_PREFIX)gnatbind$(EXEEXT)
TOOLCHAIN_GNATLINK := $(TOOLCHAIN_PROGRAM_PREFIX)gnatlink$(EXEEXT)
TOOLCHAIN_GNATPREP := $(TOOLCHAIN_PROGRAM_PREFIX)gnatprep$(EXEEXT)
TOOLCHAIN_GNATXREF := $(TOOLCHAIN_PROGRAM_PREFIX)gnatxref$(EXEEXT)
TOOLCHAIN_AR       := $(TOOLCHAIN_PROGRAM_PREFIX)ar$(EXEEXT)
TOOLCHAIN_GDB      := $(TOOLCHAIN_PROGRAM_PREFIX)gdb$(EXEEXT)
ifeq ($(USE_LIBEXEC_LD),Y)
TOOLCHAIN_LD       := $(TOOLCHAIN_PREFIX)/libexec/gcc/$(TOOLCHAIN_NAME)/$(GCC_VERSION)/ld$(EXEEXT)
else
TOOLCHAIN_LD       := $(TOOLCHAIN_PROGRAM_PREFIX)ld$(EXEEXT)
endif
TOOLCHAIN_NM       := $(TOOLCHAIN_PROGRAM_PREFIX)nm$(EXEEXT)
TOOLCHAIN_OBJCOPY  := $(TOOLCHAIN_PROGRAM_PREFIX)objcopy$(EXEEXT)
TOOLCHAIN_OBJDUMP  := $(TOOLCHAIN_PROGRAM_PREFIX)objdump$(EXEEXT)
TOOLCHAIN_RANLIB   := $(TOOLCHAIN_PROGRAM_PREFIX)ranlib$(EXEEXT)
TOOLCHAIN_READELF  := $(TOOLCHAIN_PROGRAM_PREFIX)readelf$(EXEEXT)
TOOLCHAIN_SIZE     := $(TOOLCHAIN_PROGRAM_PREFIX)size$(EXEEXT)
TOOLCHAIN_STRIP    := $(TOOLCHAIN_PROGRAM_PREFIX)strip$(EXEEXT)

# nature of compilers
TOOLCHAIN_ADAC += -x ada
# C compiler has no system libraries
TOOLCHAIN_CC   += -ffreestanding

ifeq      ($(ADA_MODE),ADA95)
TOOLCHAIN_ADAC     += -gnat95
TOOLCHAIN_GNATMAKE += -gnat95
else ifeq ($(ADA_MODE),ADA05)
TOOLCHAIN_ADAC     += -gnat2005
TOOLCHAIN_GNATMAKE += -gnat2005
else ifeq ($(ADA_MODE),ADA12)
TOOLCHAIN_ADAC     += -gnat2012
TOOLCHAIN_GNATMAKE += -gnat2012
else ifeq ($(ADA_MODE),ADA22)
TOOLCHAIN_ADAC     += -gnat2022
TOOLCHAIN_GNATMAKE += -gnat2022
else
$(warning *** Warning: no valid ADA_MODE.)
endif

AS       := $(TOOLCHAIN_AS)
ADAC     := $(TOOLCHAIN_ADAC)
CC       := $(TOOLCHAIN_CC)
CPP      := $(TOOLCHAIN_CPP)
GNATBIND := $(TOOLCHAIN_GNATBIND)
GNATCHOP := $(TOOLCHAIN_GNATCHOP)
GNATLINK := $(TOOLCHAIN_GNATLINK)
GNATLS   := $(TOOLCHAIN_GNATLS)
GNATMAKE := $(TOOLCHAIN_GNATMAKE)
GNATPREP := $(TOOLCHAIN_GNATPREP)
GNATXREF := $(TOOLCHAIN_GNATXREF)
AR       := $(TOOLCHAIN_AR)
GDB      := $(TOOLCHAIN_GDB)
LD       := $(TOOLCHAIN_LD)
NM       := $(TOOLCHAIN_NM)
OBJCOPY  := $(TOOLCHAIN_OBJCOPY)
OBJDUMP  := $(TOOLCHAIN_OBJDUMP)
RANLIB   := $(TOOLCHAIN_RANLIB)
READELF  := $(TOOLCHAIN_READELF)
SIZE     := $(TOOLCHAIN_SIZE)
STRIP    := $(TOOLCHAIN_STRIP)

# RTS
RTS_ROOT_PATH := $(RTS_BASE_PATH)/$(RTS)/$(TOOLCHAIN_NAME)
RTS_PATH      := $(RTS_ROOT_PATH)/$(GCC_MULTIDIR)
ifeq ($(OSTYPE),cmd)
RTS_PATH_CMD  := $(shell $(ECHO) $(RTS_PATH)| $(SED) -e "s|/|\\|g" -e "s|\.\\||g")
RTS_INSTALLED := $(shell IF EXIST "$(RTS_PATH_CMD)"\adainclude\system.ads (ECHO Y) ELSE (ECHO N))
else
RTS_INSTALLED := $(shell if [ -e "$(RTS_PATH)"/adainclude/system.ads ] ; then echo "Y" ; else echo "N" ; fi)
endif
ADAC          += --RTS="$(RTS_PATH)"
GNATLS        += --RTS="$(RTS_PATH)"
GNATMAKE      += --RTS="$(RTS_PATH)"
GNATBIND      += --RTS="$(RTS_PATH)"

# detect the version of fundamental tools
ifeq ($(OSTYPE),cmd)
AS_VERSION       := $(shell SET "PATH=$(PATH)" && $(AS) --version 2> nul| $(SED) -e "2,$$d")
LD_VERSION       := $(shell SET "PATH=$(PATH)" && $(LD) --version 2> nul| $(SED) -e "2,$$d")
GNATMAKE_VERSION := $(shell SET "PATH=$(PATH)" && $(GNATMAKE) --version 2> nul|$(SED) -e "2,$$d")
GPRBUILD_VERSION := $(shell SET "PATH=$(PATH)" && $(GPRBUILD) --version 2> nul|$(SED) -e "2,$$d")
else
AS_VERSION       := $(shell PATH="$(PATH)" $(AS) --version 2> /dev/null | $(SED) -e "2,\$$d")
LD_VERSION       := $(shell PATH="$(PATH)" $(LD) --version 2> /dev/null | $(SED) -e "2,\$$d")
GNATMAKE_VERSION := $(shell PATH="$(PATH)" $(GNATMAKE) --version 2> /dev/null | $(SED) -e "2,\$$d")
GPRBUILD_VERSION := $(shell PATH="$(PATH)" $(GPRBUILD) --version 2> /dev/null | $(SED) -e "2,\$$d")
endif

################################################################################
#                                                                              #
# Generic switches.                                                            #
#                                                                              #
################################################################################

# AS
AS_SWITCHES_DEFAULT       +=

# ADAC
ADAC_SWITCHES_DEFAULT     += -gnatef # Display full source path name in brief error messages.
ADAC_SWITCHES_DEFAULT     += -gnatf  # Full error reporting.
ADAC_SWITCHES_DEFAULT     += -gnatU  # Tag all error messages with the unique string "error:"
#ADAC_SWITCHES_DEFAULT     += -gnatu  # List units for this compilation.
ADAC_SWITCHES_DEFAULT     += -fverbose-asm

# CC
CC_SWITCHES_DEFAULT       += -std=c99
CC_SWITCHES_DEFAULT       += -fverbose-asm

# CPP
CPP_SWITCHES_DEFAULT      +=

# GNATBIND
GNATBIND_SWITCHES_DEFAULT += -nostdinc -nostdlib

# GNATLINK
GNATLINK_SWITCHES_DEFAULT +=

# GNATLS
GNATLS_SWITCHES_DEFAULT   +=

# GNATMAKE
#GNATMAKE_SWITCHES_DEFAULT += -d  # Display compilation progress
GNATMAKE_SWITCHES_DEFAULT += -eL # Follow all symbolic links when processing project files
GNATMAKE_SWITCHES_DEFAULT += -eS # Echo commands to stdout instead of stderr
#GNATMAKE_SWITCHES_DEFAULT += -i  # In place. Replace existing ali file, or put it with source
GNATMAKE_SWITCHES_DEFAULT += -nostdinc -nostdlib

# GNATPREP
GNATPREP_SWITCHES_DEFAULT += -c # retain all lines in the output source

# GNATXREF
GNATXREF_SWITCHES_DEFAULT +=

# AR
AR_SWITCHES_DEFAULT       +=

# LD
LD_SWITCHES_DEFAULT       += -Map $(KERNEL_BASENAME).map
LD_SWITCHES_DEFAULT       += --cref
LD_SWITCHES_DEFAULT       += --warn-common
LD_SWITCHES_DEFAULT       += --warn-section-align
#LD_SWITCHES_DEFAULT       += --no-warn-rwx-segments
LD_SWITCHES_DEFAULT       += --print-memory-usage

# NM
NM_SWITCHES_DEFAULT       +=

# OBJCOPY
OBJCOPY_SWITCHES_DEFAULT  +=

# OBJDUMP
OBJDUMP_SWITCHES_DEFAULT  += --demangle=gnat

# RANLIB

# READELF
READELF_SWITCHES_DEFAULT  += --wide # Allow output width to exceed 80 characters
#READELF_SWITCHES_DEFAULT  += -t    # Display the section details
READELF_SWITCHES_DEFAULT  += --all # Equivalent to: -h -l -S -s -r -d -V -A -I

# SIZE
SIZE_SWITCHES_DEFAULT     += --format=sysv
SIZE_SWITCHES_DEFAULT     += --radix=16

# STRIP
STRIP_SWITCHES_DEFAULT    +=

################################################################################
#                                                                              #
# Assembler/Compiler build switches.                                           #
#                                                                              #
################################################################################

#
# Code generation.
#
# NOTE: the use of -gnatN is deprecated, the use of -gnatn is preferred
#
ADAC_SWITCHES_DEFAULT += -gnatn # Activate inlining for subprograms for which pragma inline is specified.
# dead code removal
ADAC_SWITCHES_DEFAULT += -ffunction-sections -fdata-sections
CC_SWITCHES_DEFAULT   += -ffunction-sections -fdata-sections
LD_SWITCHES_DEFAULT   += --gc-sections

#
# Debugging switches.
#
AS_SWITCHES_DEFAULT   += -g3 -gdwarf-4
ADAC_SWITCHES_DEFAULT += -g3 -gdwarf-4 -fno-omit-frame-pointer
CC_SWITCHES_DEFAULT   += -g3 -gdwarf-4 -fno-omit-frame-pointer
LD_SWITCHES_DEFAULT   += -g
ifeq ($(ENABLE_SPLIT_DWARF),Y)
ADAC_SWITCHES_DEFAULT += -gsplit-dwarf
CC_SWITCHES_DEFAULT   += -gsplit-dwarf
endif

#
# Ada Run-Time Checks switches.
#
# __REF__ https://gcc.gnu.org/onlinedocs/gnat_ugn/Run-Time-Checks.html
# NOTE: -gnato and -gnatE are switches required in order to be a "conforming compiler"
# NOTE: -gnatE is not necessary, because GNAT ensure statically that the checks would not fail
# NOTE: -gnato = -gnato1
#
# maximum check settings: -gnato1=ON  -gnatp=OFF -fstack-check=ON
# minimum check settings: -gnato1=OFF -gnatp=ON  -fstack-check=OFF
#
#ADAC_SWITCHES_DEFAULT += -gnata        # pragma Assert enabled (requires s-assert.ads).
ADAC_SWITCHES_DEFAULT += -gnatE        # Enables dynamic checks for access-before-elaboration on subprogram calls and generic instantiations.
ADAC_SWITCHES_DEFAULT += -gnato1       # Enable "STRICT" numeric overflow checking.
#ADAC_SWITCHES_DEFAULT += -gnatp        # pragma Suppress (All_Checks)
#ADAC_SWITCHES_DEFAULT += -fstack-check # Activates stack overflow checking.

#
# Compilation information switches, stack usage and various functionalities.
#
# NOTE: use combinations of -gnatD -gnatG -gnatL for expanded source form
# NOTE: -gnatD cause creation of .dg files with expanded informations
# re-routed from stdout to these files; gcc-wrapper will create empty
# .expand files
#
ADAC_SWITCHES_DEFAULT += -fdump-ipa-cgraph           # .000i.cgraph
ADAC_SWITCHES_DEFAULT += -fdump-rtl-expand           # .233r.expand
ADAC_SWITCHES_DEFAULT += -fdump-rtl-dfinish          # .313r.dfinish
ADAC_SWITCHES_DEFAULT += -fdump-tree-optimized-graph # .231t.optimized[.dot]
ifneq ($(DISABLE_STACK_USAGE),Y)
ADAC_SWITCHES_DEFAULT += -fstack-usage               # Static Stack Usage Analysis.
endif
#ADAC_SWITCHES_DEFAULT += -gnatD                      # Create expanded source files for source level debugging.
ADAC_SWITCHES_DEFAULT += -gnatG -gnatL               # List generated expanded code in source form.
ADAC_SWITCHES_DEFAULT += -gnatR                      # Output representation information for declared types and objects.
#ADAC_SWITCHES_DEFAULT += -gnatt                      # Generate tree output file.
# gnat1 debug switches
#ADAC_SWITCHES_DEFAULT += -gnatdp                     # Generate messages for parser scope stack push/pops
ADAC_SWITCHES_DEFAULT += -gnatdt                     # Print full tree.
ADAC_SWITCHES_DEFAULT += -gnatd.b                    # Dump backend types
ADAC_SWITCHES_DEFAULT += -gnatd.j                    # Generate listing of frontend inlined calls

#
# Ada validity checks.
#
ADAC_SWITCHES_DEFAULT += -gnatVa # All validity Checks.
#ADAC_SWITCHES_DEFAULT += -gnatVc # Validity checks for copies.
#ADAC_SWITCHES_DEFAULT += -gnatVd # Default (RM) validity checks.
#ADAC_SWITCHES_DEFAULT += -gnatVe # Validity checks for elementary components.
#ADAC_SWITCHES_DEFAULT += -gnatVf # Validity checks for floating-point values.
#ADAC_SWITCHES_DEFAULT += -gnatVi # Validity checks for `in` mode parameters.
#ADAC_SWITCHES_DEFAULT += -gnatVm # Validity checks for `in out` mode parameters.
#ADAC_SWITCHES_DEFAULT += -gnatVo # Validity checks for operator and attribute operands.
#ADAC_SWITCHES_DEFAULT += -gnatVp # Validity checks for parameters.
#ADAC_SWITCHES_DEFAULT += -gnatVr # Validity checks for function returns.
#ADAC_SWITCHES_DEFAULT += -gnatVs # Validity checks for subscripts.
#ADAC_SWITCHES_DEFAULT += -gnatVt # Validity checks for tests.

################################################################################
#                                                                              #
# Basic and fine-grained optimization switches, organized into levels.         #
#                                                                              #
################################################################################

#
# Basic optimization level is -O1. At -O0, GCC generates several function
# calls to "_Unwind_Resume", which is a LibGCC function.
#

OPTIMIZATION_SWITCHES :=

OPTIMIZATION_LEVEL ?= 0

ifeq      ($(OPTIMIZATION_LEVEL),0)
OPTIMIZATION_SWITCHES += -O0
else ifeq ($(OPTIMIZATION_LEVEL),1)
OPTIMIZATION_SWITCHES += -O1
#OPTIMIZATION_SWITCHES += -fpeephole2
#OPTIMIZATION_SWITCHES += -frerun-cse-after-loop
else ifeq ($(OPTIMIZATION_LEVEL),2)
OPTIMIZATION_SWITCHES += -O2
# debugging switches already specify "-fno-omit-frame-pointer"
#OPTIMIZATION_SWITCHES += -fomit-frame-pointer
else
$(warning *** Warning: no valid OPTIMIZATION_LEVEL.)
endif

ADAC_SWITCHES_DEFAULT += $(OPTIMIZATION_SWITCHES)
CC_SWITCHES_DEFAULT   += $(OPTIMIZATION_SWITCHES)

################################################################################
#                                                                              #
# Import RTS switches, assembler/compiler warning and style switches,          #
# verbosity.                                                                   #
#                                                                              #
################################################################################

-include $(RTS_DIRECTORY)/$(RTS)/$(TOOLCHAIN_NAME)/Makefile.rts.in
export ADAC_SWITCHES_RTS

ADAC_SWITCHES_DEFAULT += $(ADAC_SWITCHES_RTS)
CC_SWITCHES_DEFAULT   += $(CC_SWITCHES_RTS)

# Maximum Nesting Level
MNL := 9
# Maximum Line Length
MLL := 132

-include Makefile.wr.in
-include Makefile.st.in

ifeq ($(VERBOSE),Y)
ADAC_SWITCHES_DEFAULT     += -gnatb -gnatv
GNATMAKE_SWITCHES_DEFAULT += -v
else
GNATMAKE_SWITCHES_DEFAULT += -q
endif

################################################################################
#                                                                              #
# Synthesize toolchain command lines with theirs own options/switches.         #
#                                                                              #
################################################################################

ADAC     += $(ADAC_SWITCHES_DEFAULT) \
            $(ADAC_SWITCHES_WARNING) \
            $(ADAC_SWITCHES_STYLE)   \
            $(GCC_SWITCHES_PLATFORM)

AR       += $(AR_SWITCHES_DEFAULT)

AS       += $(AS_SWITCHES_DEFAULT)  \
            $(AS_SWITCHES_PLATFORM)

CC       += $(CC_SWITCHES_DEFAULT)   \
            $(CC_SWITCHES_WARNING)   \
            $(GCC_SWITCHES_PLATFORM)

CPP      += $(CPP_SWITCHES_DEFAULT)  \
            $(GCC_SWITCHES_PLATFORM)

GNATBIND += $(GNATBIND_SWITCHES_DEFAULT)

GNATCHOP +=

GNATLINK += $(GNATLINK_SWITCHES_DEFAULT)

GNATLS   +=

GNATMAKE += $(GNATMAKE_SWITCHES_DEFAULT) \
            $(ADAC_SWITCHES_DEFAULT)     \
            $(ADAC_SWITCHES_WARNING)     \
            $(ADAC_SWITCHES_STYLE)       \
            $(GCC_SWITCHES_PLATFORM)

GNATPREP += $(GNATPREP_SWITCHES_DEFAULT)

GNATXREF += $(GNATXREF_SWITCHES_DEFAULT)

LD       += $(LD_SWITCHES_DEFAULT)  \
            $(LD_SWITCHES_PLATFORM)

NM       += $(NM_SWITCHES_DEFAULT)

OBJCOPY  += $(OBJCOPY_SWITCHES_DEFAULT)  \
            $(OBJCOPY_SWITCHES_PLATFORM)

OBJDUMP  += $(OBJDUMP_SWITCHES_DEFAULT)  \
            $(OBJDUMP_SWITCHES_PLATFORM)
RANLIB   += $(RANLIB_SWITCHES_DEFAULT)

READELF  += $(READELF_SWITCHES_DEFAULT)

SIZE     += $(SIZE_SWITCHES_DEFAULT)

STRIP    += $(STRIP_SWITCHES_DEFAULT)

################################################################################
#                                                                              #
# GCC-wrapper.                                                                 #
# Required for output of assembler listings, expanded Ada code and Makefile    #
# timestamps to trigger Ada binding.                                           #
#                                                                              #
################################################################################

# enable verbose assembler output in GCC wrapper (should begin with "-a")
GCC_WRAPPER_ASSEMBLER_OUTPUT := -adghlmns
export GCC_WRAPPER_ASSEMBLER_OUTPUT

ADAC += -wrapper "$(GCC_WRAPPER)"
CC   += -wrapper "$(GCC_WRAPPER)"

################################################################################
#                                                                              #
# GNAT-wrapper.                                                                #
# Required for "brief-mode" echoed commands and Makefile timestamps to trigger #
# Ada binding.                                                                 #
#                                                                              #
################################################################################

# brief command name label (see brief-command function in Makefile.fn.in)
#                             123456789012_...
GNAT_WRAPPER_GCC_BRIEFTEXT := [GCC-WRAP]   (+)
export GNAT_WRAPPER_GCC_BRIEFTEXT

# VERBOSE for GNAT-wrapper
GNAT_WRAPPER_VERBOSE := $(VERBOSE)
export GNAT_WRAPPER_VERBOSE

# GNAT-wrapper is not toolchain-specific, it needs to know the GCC executable
GNAT_WRAPPER_GCC_EXECUTABLE := $(TOOLCHAIN_PREFIX)/bin/$(TOOLCHAIN_GCC)
export GNAT_WRAPPER_GCC_EXECUTABLE

GNATMAKE += --GCC="$(GNAT_WRAPPER)" -cargs -wrapper "$(GCC_WRAPPER)" -margs

################################################################################
#                                                                              #
# Filenames to check for compile or bind phase triggering (generated by the    #
# GCC- or GNAT-wrapper). They end up nearly the same, but the object directory #
# is not implicitly prefixed when processing files in MAKEFILE/GNATMAKE mode.  #
#                                                                              #
################################################################################

ifeq ($(BUILD_MODE),MAKEFILE)
GCC_WRAPPER_TIMESTAMP_FILENAME      :=
GNAT_WRAPPER_TIMESTAMP_FILENAME     := $(OBJECT_DIRECTORY)/gnatmake.tmp
GCC_GNAT_WRAPPER_TIMESTAMP_FILENAME := $(GNAT_WRAPPER_TIMESTAMP_FILENAME)
else ifeq ($(BUILD_MODE),GPR)
GCC_WRAPPER_TIMESTAMP_FILENAME      := gccmake.tmp
GNAT_WRAPPER_TIMESTAMP_FILENAME     :=
GCC_GNAT_WRAPPER_TIMESTAMP_FILENAME := $(OBJECT_DIRECTORY)/$(GCC_WRAPPER_TIMESTAMP_FILENAME)
endif
export GCC_WRAPPER_TIMESTAMP_FILENAME
export GNAT_WRAPPER_TIMESTAMP_FILENAME

################################################################################
#                                                                              #
# Various support toolchain executables.                                       #
#                                                                              #
################################################################################

# special back-end compiler for GNATBIND-generated Ada files without output
# of spurious warnings
ADAC_GNATBIND := $(filter-out -gnatwu -gnatya -gnatyb -gnatyM$(MLL) -gnatyu,$(ADAC))

