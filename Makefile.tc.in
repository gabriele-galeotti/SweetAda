
#
# Toolchain sub-Makefile
#
# Copyright (C) 2020-2025 Gabriele Galeotti
#
# This work is licensed under the terms of the MIT License.
# Please consult the LICENSE.txt file located in the top-level directory.
#

#
# Environment variables:
# OSTYPE
# PATH
# EXEEXT
# SCREXT
# VERBOSE
# PLATFORM_GOALS
# MAKECMDGOALS
# INFOCONFIG_GOALS
# SWEETADA_PATH
# TOOLCHAIN_PREFIX
# TOOLCHAIN_NAME
# RTS_DIRECTORY
# RTS
# ADA_MODE
# STACK_LIMIT
# BUILD_MODE
# OPTIMIZATION_LEVEL
# OBJECT_DIRECTORY
# KERNEL_BASENAME
# GNATADC_FILENAME
# GCC_WRAPPER
# GNAT_WRAPPER
# ENABLE_SPLIT_DWARF
# CONFIGURE_DEPS
#

################################################################################
#                                                                              #
# Toolchain initialization.                                                    #
#                                                                              #
################################################################################

ifneq ($(TOOLCHAIN_NAME),)
TOOLCHAIN_PROGRAM_PREFIX := $(TOOLCHAIN_NAME)-
endif

# raw compiler executable used for 1) retrieve informations, and 2) back-end
# in the GNATMAKE wrapper
# NOTE: this is not the same as TOOLCHAIN_CC, which is possibly used to
# compile C source files
TOOLCHAIN_GCC := $(TOOLCHAIN_PROGRAM_PREFIX)gcc$(EXEEXT)

# detect GCC compiler
ifeq ($(OSTYPE),cmd)
GCC_VERSION := $(shell SET "PATH=$(PATH)" && $(TOOLCHAIN_GCC) -dumpversion 2>nul)
else
GCC_VERSION := $(shell PATH="$(PATH)" $(TOOLCHAIN_GCC) -dumpversion 2> /dev/null)
endif
ifneq ($(filter rts $(PLATFORM_GOALS),$(MAKECMDGOALS)),)
ifeq ($(GCC_VERSION),)
# no valid toolchain found, output a warning message
$(warning *** Warning: no valid toolchain.)
endif
endif

# these must be computed after configuration variables are set; different
# options could lead to different multilib library directories
# GCC_MULTIDIR is the multilib directory inside the library search directory
# NOTE: this is different from "-print-multi-lib", which prints all multilibs
ifeq ($(OSTYPE),cmd)
GCC_MULTILIBS   := $(shell                       \
                     SET "PATH=$(PATH)"       && \
                     $(TOOLCHAIN_GCC)            \
                       -print-multi-lib 2>nul    \
                     )
GCC_MULTIDIR    := $(shell                             \
                     SET "PATH=$(PATH)"             && \
                     $(TOOLCHAIN_GCC)                  \
                       $(GCC_SWITCHES_PLATFORM)        \
                       -print-multi-directory 2>nul    \
                     )
LIBGCC_FILENAME := $(shell                              \
                     SET "PATH=$(PATH)"              && \
                     $(TOOLCHAIN_GCC)                   \
                       $(GCC_SWITCHES_PLATFORM)         \
                       -print-libgcc-file-name 2>nul    \
                     )
else
GCC_MULTILIBS   := $(shell                           \
                     PATH="$(PATH)"                  \
                     $(TOOLCHAIN_GCC)                \
                       -print-multi-lib 2> /dev/null \
                     )
GCC_MULTIDIR    := $(shell                                 \
                     PATH="$(PATH)"                        \
                     $(TOOLCHAIN_GCC)                      \
                       $(GCC_SWITCHES_PLATFORM)            \
                       -print-multi-directory 2> /dev/null \
                     )
LIBGCC_FILENAME := $(shell                                  \
                     PATH="$(PATH)"                         \
                     $(TOOLCHAIN_GCC)                       \
                       $(GCC_SWITCHES_PLATFORM)             \
                       -print-libgcc-file-name 2> /dev/null \
                     )
endif

# libm
LIBM_FILENAME := $(TOOLCHAIN_PREFIX)/$(TOOLCHAIN_NAME)/lib/$(GCC_MULTIDIR)/libm.a

# RTS
RTS_PATH      := $(SWEETADA_PATH)/$(RTS_DIRECTORY)/$(RTS)/$(TOOLCHAIN_NAME)/$(GCC_MULTIDIR)
ifeq ($(OSTYPE),cmd)
RTS_INSTALLED := $(shell                                              \
                   SETLOCAL ENABLEDELAYEDEXPANSION                 && \
                   SET "RTS_PATH=$(RTS_PATH)"                      && \
                   SET "RTS_PATH_CMD=!RTS_PATH:/=\!"               && \
                   IF EXIST "!RTS_PATH_CMD!"\adainclude\system.ads    \
                     (ECHO Y) ELSE (ECHO N)                           \
                   )
else
RTS_INSTALLED := $(shell                                                  \
                   if [ -e "$(RTS_PATH)"/adainclude/system.ads ] ; then   \
                     printf "%s\n" "Y"                                  ; \
                   else                                                   \
                     printf "%s\n" "N"                                  ; \
                   fi                                                     \
                   )
endif

################################################################################
#                                                                              #
# Define toolchain components.                                                 #
#                                                                              #
################################################################################

# basic toolchain executables
TOOLCHAIN_AS       := $(TOOLCHAIN_PROGRAM_PREFIX)as$(EXEEXT)
TOOLCHAIN_ADAC     := $(TOOLCHAIN_PROGRAM_PREFIX)gcc$(EXEEXT)
TOOLCHAIN_CC       := $(TOOLCHAIN_PROGRAM_PREFIX)gcc$(EXEEXT)
TOOLCHAIN_CPP      := $(TOOLCHAIN_PROGRAM_PREFIX)cpp$(EXEEXT)
TOOLCHAIN_GNATCHOP := $(TOOLCHAIN_PROGRAM_PREFIX)gnatchop$(EXEEXT)
TOOLCHAIN_GNATBIND := $(TOOLCHAIN_PROGRAM_PREFIX)gnatbind$(EXEEXT)
TOOLCHAIN_GNATLINK := $(TOOLCHAIN_PROGRAM_PREFIX)gnatlink$(EXEEXT)
TOOLCHAIN_GNATLS   := $(TOOLCHAIN_PROGRAM_PREFIX)gnatls$(EXEEXT)
TOOLCHAIN_GNATPREP := $(TOOLCHAIN_PROGRAM_PREFIX)gnatprep$(EXEEXT)
TOOLCHAIN_GNATXREF := $(TOOLCHAIN_PROGRAM_PREFIX)gnatxref$(EXEEXT)
TOOLCHAIN_AR       := $(TOOLCHAIN_PROGRAM_PREFIX)ar$(EXEEXT)
TOOLCHAIN_GDB      := $(TOOLCHAIN_PROGRAM_PREFIX)gdb$(EXEEXT)
TOOLCHAIN_LD       := $(TOOLCHAIN_PROGRAM_PREFIX)ld$(EXEEXT)
TOOLCHAIN_NM       := $(TOOLCHAIN_PROGRAM_PREFIX)nm$(EXEEXT)
TOOLCHAIN_OBJCOPY  := $(TOOLCHAIN_PROGRAM_PREFIX)objcopy$(EXEEXT)
TOOLCHAIN_OBJDUMP  := $(TOOLCHAIN_PROGRAM_PREFIX)objdump$(EXEEXT)
TOOLCHAIN_RANLIB   := $(TOOLCHAIN_PROGRAM_PREFIX)ranlib$(EXEEXT)
TOOLCHAIN_READELF  := $(TOOLCHAIN_PROGRAM_PREFIX)readelf$(EXEEXT)
TOOLCHAIN_SIZE     := $(TOOLCHAIN_PROGRAM_PREFIX)size$(EXEEXT)
TOOLCHAIN_STRIP    := $(TOOLCHAIN_PROGRAM_PREFIX)strip$(EXEEXT)

ifneq ($(filter $(INFOCONFIG_GOALS),$(MAKECMDGOALS)),)
ifeq ($(OSTYPE),cmd)
AS_VERSION := $(shell                                                \
                SET "PATH=$(PATH)"                                && \
                SET "SWEETADA_PATH=$(SWEETADA_PATH)"              && \
                SET "LIBUTILS_DIRECTORY=$(LIBUTILS_DIRECTORY)"    && \
                $(TOOLCHAIN_AS) --version 2>nul| $(FILEHEAD) -n 1    \
                )
LD_VERSION := $(shell                                                \
                SET "PATH=$(PATH)"                                && \
                SET "SWEETADA_PATH=$(SWEETADA_PATH)"              && \
                SET "LIBUTILS_DIRECTORY=$(LIBUTILS_DIRECTORY)"    && \
                $(TOOLCHAIN_LD) --version 2>nul| $(FILEHEAD) -n 1    \
                )
else
AS_VERSION := $(shell                                                     \
                PATH="$(PATH)"                                            \
                $(TOOLCHAIN_AS) --version 2> /dev/null | $(FILEHEAD) -n 1 \
                )
LD_VERSION := $(shell                                                     \
                PATH="$(PATH)"                                            \
                $(TOOLCHAIN_LD) --version 2> /dev/null | $(FILEHEAD) -n 1 \
                )
endif
endif

# nature of compilers
TOOLCHAIN_ADAC += -x ada

# C compiler has no system libraries
TOOLCHAIN_CC += -ffreestanding

ifeq      ($(ADA_MODE),ADA95)
TOOLCHAIN_ADAC += -gnat95
else ifeq ($(ADA_MODE),ADA05)
TOOLCHAIN_ADAC += -gnat2005
else ifeq ($(ADA_MODE),ADA12)
TOOLCHAIN_ADAC += -gnat2012
else ifeq ($(ADA_MODE),ADA22)
TOOLCHAIN_ADAC += -gnat2022
else
$(warning *** Warning: no valid ADA_MODE.)
endif

################################################################################
#                                                                              #
# Basic toolchain commands and default switches.                               #
#                                                                              #
################################################################################

AS       := $(TOOLCHAIN_AS)
ADAC     := $(TOOLCHAIN_ADAC)
CC       := $(TOOLCHAIN_CC)
CPP      := $(TOOLCHAIN_CPP)
GNATBIND := $(TOOLCHAIN_GNATBIND)
GNATCHOP := $(TOOLCHAIN_GNATCHOP)
GNATLINK := $(TOOLCHAIN_GNATLINK)
GNATLS   := $(TOOLCHAIN_GNATLS)
GNATPREP := $(TOOLCHAIN_GNATPREP)
GNATXREF := $(TOOLCHAIN_GNATXREF)
AR       := $(TOOLCHAIN_AR)
GDB      := $(TOOLCHAIN_GDB)
LD       := $(TOOLCHAIN_LD)
NM       := $(TOOLCHAIN_NM)
OBJCOPY  := $(TOOLCHAIN_OBJCOPY)
OBJDUMP  := $(TOOLCHAIN_OBJDUMP)
RANLIB   := $(TOOLCHAIN_RANLIB)
READELF  := $(TOOLCHAIN_READELF)
SIZE     := $(TOOLCHAIN_SIZE)
STRIP    := $(TOOLCHAIN_STRIP)

# add RTS and import switches
ADAC     += --RTS="$(RTS_PATH)"
GNATLS   += --RTS="$(RTS_PATH)"
GNATBIND += --RTS="$(RTS_PATH)"

# query ADAC/CC RTS switches
ifeq ($(OSTYPE),cmd)
$(foreach s,                                                 \
  $(subst |,$(SPACE),$(subst $(SPACE),$(DEL),$(shell         \
    SET "VERBOSE="                                        && \
    SET "PATH=$(PATH)"                                    && \
    SET "KERNEL_PARENT_PATH=.."                           && \
    SET "CPU=$(CPU)"                                      && \
    SET "RTS=$(RTS)"                                      && \
    SET "TOOLCHAIN_NAME=$(TOOLCHAIN_NAME)"                && \
    SET "MULTILIB=$(GCC_MULTIDIR)"                        && \
    "$(MAKE)"                                                \
      -C $(RTS_DIRECTORY)                                    \
      PROBEVARIABLES="ADAC_SWITCHES_RTS CC_SWITCHES_RTS"     \
      probevariables                                         \
    2>nul))),$(eval $(strip $(subst $(DEL),$(SPACE),$(s)))))
else
$(foreach s,                                                        \
  $(subst |,$(SPACE),$(subst $(SPACE),$(DEL),$(shell                \
    VERBOSE=                                                        \
    PATH="$(PATH)"                                                  \
    KERNEL_PARENT_PATH=..                                           \
    CPU=$(CPU)                                                      \
    RTS=$(RTS)                                                      \
    TOOLCHAIN_NAME=$(TOOLCHAIN_NAME)                                \
    MULTILIB=$(GCC_MULTIDIR)                                        \
    "$(MAKE)"                                                       \
      -C $(RTS_DIRECTORY)                                           \
      PROBEVARIABLES="ADAC_SWITCHES_RTS CC_SWITCHES_RTS"            \
      probevariables                                                \
    2> /dev/null))),$(eval $(strip $(subst $(DEL),$(SPACE),$(s)))))
endif
export ADAC_SWITCHES_RTS
export CC_SWITCHES_RTS

# AS
AS_SWITCHES_DEFAULT       +=

# ADAC
ADAC_SWITCHES_DEFAULT     += $(ADAC_SWITCHES_RTS)

# CC
CC_SWITCHES_DEFAULT       += $(CC_SWITCHES_RTS)

# CPP
CPP_SWITCHES_DEFAULT      +=

# GNATBIND
GNATBIND_SWITCHES_DEFAULT += -nostdinc -nostdlib

# GNATCHOP
GNATCHOP_SWITCHES_DEFAULT +=

# GNATLINK
GNATLINK_SWITCHES_DEFAULT +=

# GNATLS
GNATLS_SWITCHES_DEFAULT   +=

# GNATPREP
# retain all lines in the output source
GNATPREP_SWITCHES_DEFAULT += -c

# GNATXREF
GNATXREF_SWITCHES_DEFAULT +=

# AR
AR_SWITCHES_DEFAULT       +=

# LD
LD_SWITCHES_DEFAULT       += -Map $(KERNEL_BASENAME).map
LD_SWITCHES_DEFAULT       += --cref
LD_SWITCHES_DEFAULT       += --warn-common
LD_SWITCHES_DEFAULT       += --warn-section-align
#LD_SWITCHES_DEFAULT       += --no-warn-rwx-segments
LD_SWITCHES_DEFAULT       += --print-memory-usage
LD_SWITCHES_DEFAULT       += --gc-sections
LD_SWITCHES_DEFAULT       += -g

# NM
NM_SWITCHES_DEFAULT       +=

# OBJCOPY
OBJCOPY_SWITCHES_DEFAULT  +=

# OBJDUMP
OBJDUMP_SWITCHES_DEFAULT  += --demangle=gnat

# RANLIB
RANLIB_SWITCHES_DEFAULT   +=

# READELF
# Allow output width to exceed 80 characters
READELF_SWITCHES_DEFAULT  += --wide
# display the section details
#READELF_SWITCHES_DEFAULT  += -t
# Equivalent to: -h -l -S -s -r -d -V -A -I
READELF_SWITCHES_DEFAULT  += --all

# SIZE
SIZE_SWITCHES_DEFAULT     += --format=sysv
SIZE_SWITCHES_DEFAULT     += --radix=16

# STRIP
STRIP_SWITCHES_DEFAULT    +=

################################################################################
#                                                                              #
# GNATMAKE mode: import all settings.                                          #
# GPRbuild mode: only define the executable to build the system.               #
#                                                                              #
################################################################################

ifeq      ($(BUILD_MODE),GNATMAKE)
include gnatmake.tc.in
CONFIGURE_DEPS += gnatmake.tc.in
ifneq ($(filter $(INFOCONFIG_GOALS),$(MAKECMDGOALS)),)
ifeq ($(OSTYPE),cmd)
GNATMAKE_VERSION := $(shell                                                      \
                      SET "PATH=$(PATH)"                                      && \
                      SET "SWEETADA_PATH=$(SWEETADA_PATH)"                    && \
                      SET "LIBUTILS_DIRECTORY=$(LIBUTILS_DIRECTORY)"          && \
                      $(TOOLCHAIN_GNATMAKE) --version 2>nul| $(FILEHEAD) -n 1    \
                      )
else
GNATMAKE_VERSION := $(shell                                       \
                      PATH="$(PATH)"                              \
                      $(TOOLCHAIN_GNATMAKE)                       \
                        --version 2> /dev/null | $(FILEHEAD) -n 1 \
                      )
endif
endif
else ifeq ($(BUILD_MODE),GPRbuild)
GPRBUILD := gprbuild$(EXEEXT)
ifneq ($(filter $(INFOCONFIG_GOALS),$(MAKECMDGOALS)),)
ifeq ($(OSTYPE),cmd)
GPRBUILD_VERSION := $(shell                                             \
                      SET "PATH=$(PATH)"                             && \
                      SET "SWEETADA_PATH=$(SWEETADA_PATH)"           && \
                      SET "LIBUTILS_DIRECTORY=$(LIBUTILS_DIRECTORY)" && \
                      $(GPRBUILD) --version 2>nul| $(FILEHEAD) -n 1     \
                      )
else
GPRBUILD_VERSION := $(shell                                       \
                      PATH="$(PATH)"                              \
                      $(GPRBUILD)                                 \
                        --version 2> /dev/null | $(FILEHEAD) -n 1 \
                      )
endif
endif
GPRCLEAN := gprclean$(EXEEXT)
endif

################################################################################
#                                                                              #
# Synthesize toolchain command lines with theirs own options/switches.         #
#                                                                              #
################################################################################

ADAC     += $(ADAC_SWITCHES_DEFAULT) $(GCC_SWITCHES_PLATFORM)

AR       += $(AR_SWITCHES_DEFAULT)

AS       += $(AS_SWITCHES_DEFAULT) $(AS_SWITCHES_PLATFORM)

CC       += $(CC_SWITCHES_DEFAULT) $(GCC_SWITCHES_PLATFORM)

CPP      += $(CPP_SWITCHES_DEFAULT) $(GCC_SWITCHES_PLATFORM)

GNATBIND += $(GNATBIND_SWITCHES_DEFAULT)

GNATCHOP += $(GNATCHOP_SWITCHES_DEFAULT)

GNATLINK += $(GNATLINK_SWITCHES_DEFAULT)

GNATLS   += $(GNATLS_SWITCHES_DEFAULT)

ifeq ($(BUILD_MODE),GNATMAKE)
GNATMAKE += $(ADAC_SWITCHES_DEFAULT)
GNATMAKE += $(GNATMAKE_SWITCHES_DEFAULT) $(GCC_SWITCHES_PLATFORM)
endif

GNATPREP += $(GNATPREP_SWITCHES_DEFAULT)

GNATXREF += $(GNATXREF_SWITCHES_DEFAULT)

LD       += $(LD_SWITCHES_DEFAULT) $(LD_SWITCHES_PLATFORM)

NM       += $(NM_SWITCHES_DEFAULT)

OBJCOPY  += $(OBJCOPY_SWITCHES_DEFAULT) $(OBJCOPY_SWITCHES_PLATFORM)

OBJDUMP  += $(OBJDUMP_SWITCHES_DEFAULT) $(OBJDUMP_SWITCHES_PLATFORM)

RANLIB   += $(RANLIB_SWITCHES_DEFAULT)

READELF  += $(READELF_SWITCHES_DEFAULT)

SIZE     += $(SIZE_SWITCHES_DEFAULT)

STRIP    += $(STRIP_SWITCHES_DEFAULT)

################################################################################
#                                                                              #
# GCC-wrapper.                                                                 #
# Required for output of assembler listings, expanded Ada code and Makefile    #
# timestamps to trigger Ada binding.                                           #
#                                                                              #
################################################################################

# enable verbose assembler output in GCC wrapper (should begin with "-a")
GCC_WRAPPER_ASSEMBLER_OUTPUT := -adghlmns
export GCC_WRAPPER_ASSEMBLER_OUTPUT

################################################################################
#                                                                              #
# GNAT-wrapper.                                                                #
# Required for "brief-mode" echoed commands and Makefile timestamps to trigger #
# Ada binding.                                                                 #
#                                                                              #
################################################################################

# brief command name label (see brief-command function in Makefile.fn.in)
GNAT_WRAPPER_GCC_BRIEFTEXT := $(shell $(call brief-text,[GCC-WRAP],(+)))
export GNAT_WRAPPER_GCC_BRIEFTEXT

# VERBOSE for GNAT-wrapper
GNAT_WRAPPER_VERBOSE := $(VERBOSE)
export GNAT_WRAPPER_VERBOSE

# GNAT-wrapper is not toolchain-specific, it needs to know the GCC executable
GNAT_WRAPPER_GCC_EXECUTABLE := $(TOOLCHAIN_PREFIX)/bin/$(TOOLCHAIN_GCC)
export GNAT_WRAPPER_GCC_EXECUTABLE

################################################################################
#                                                                              #
# Filenames to check for compile or bind phase triggering (generated by the    #
# GCC- or GNAT-wrapper). They end up nearly the same, but the object directory #
# is not implicitly prefixed when processing files in MAKEFILE/GNATMAKE mode.  #
#                                                                              #
################################################################################

ifeq      ($(BUILD_MODE),GNATMAKE)
GCC_WRAPPER_TIMESTAMP_FILENAME      :=
GNAT_WRAPPER_TIMESTAMP_FILENAME     := $(OBJECT_DIRECTORY)/gnatmake.tmp
GCC_GNAT_WRAPPER_TIMESTAMP_FILENAME := $(GNAT_WRAPPER_TIMESTAMP_FILENAME)
else ifeq ($(BUILD_MODE),GPRbuild)
GCC_WRAPPER_TIMESTAMP_FILENAME      := gccmake.tmp
GNAT_WRAPPER_TIMESTAMP_FILENAME     :=
GCC_GNAT_WRAPPER_TIMESTAMP_FILENAME := $(OBJECT_DIRECTORY)/$(GCC_WRAPPER_TIMESTAMP_FILENAME)
endif
export GCC_WRAPPER_TIMESTAMP_FILENAME
export GNAT_WRAPPER_TIMESTAMP_FILENAME

ADAC     += -wrapper $(GCC_WRAPPER)
CC       += -wrapper $(GCC_WRAPPER)
ifeq ($(BUILD_MODE),GNATMAKE)
GNATMAKE += --GCC=$(GNAT_WRAPPER) -cargs -wrapper $(GCC_WRAPPER) -margs
endif

################################################################################
#                                                                              #
# Final toolchain setup.                                                       #
#                                                                              #
################################################################################

# beautify compiler command lines
ADAC     := $(filter-out ,$(ADAC))
CC       := $(filter-out ,$(CC))
ifeq ($(BUILD_MODE),GNATMAKE)
GNATMAKE := $(filter-out ,$(GNATMAKE))
endif

# special back-end compiler for GNATBIND-generated Ada files without output of
# spurious warnings
ADAC_GNATBIND := $(filter-out $(ADAC_SWITCHES_STYLE),$(ADAC))

# avoid extraneous informations in .d files during VERBOSE mode
ifeq ($(BUILD_MODE),GNATMAKE)
GNATMAKE_DEPEND := $(filter-out -v,$(GNATMAKE))
endif

