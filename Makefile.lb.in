
#
# Library sub-Makefile
#
# Copyright (C) 2020-2025 Gabriele Galeotti
#
# This work is licensed under the terms of the MIT License.
# Please consult the LICENSE.txt file located in the top-level directory.
#

#
# Environment variables:
# OSTYPE
# BUILD_MODE
# KERNEL_PARENT_PATH
# LIB_DIRECTORY
# OBJ_DIRECTORY
# DEP_DIRECTORY
# LIB_DIRECTORY_CMD
# OBJ_DIRECTORY_CMD
# DEP_DIRECTORY_CMD
# LIBRARY_NAME
# OBJECTS
# INCLUDES
# AR
# RANLIB
# CC
# GNATMAKE
# GNATMAKE_DEPEND
# GCC_WRAPPER_TIMESTAMP_FILENAME
# GNAT_WRAPPER_TIMESTAMP_FILENAME
#

# export top-level directory reference
export KERNEL_PARENT_PATH

# avoid generation of unuseful timestamps
export GCC_WRAPPER_TIMESTAMP_FILENAME :=
export GNAT_WRAPPER_TIMESTAMP_FILENAME :=

ifeq      ($(BUILD_MODE),GNATMAKE)

#
# GNATMAKE
#

INCLUDES := $(foreach d,$(INCLUDE_DIRECTORIES),-I$(KERNEL_PARENT_PATH)/$(d))
VPATH    := $(foreach d,$(INCLUDE_DIRECTORIES),$(KERNEL_PARENT_PATH)/$(d))

KERNEL_PARENT_PATH_SED := $(subst .,\.,$(KERNEL_PARENT_PATH))
OBJ_DIRECTORY_SED      := $(subst .,\.,$(OBJ_DIRECTORY))

ifeq      ($(LIBRARY_NAME),clibrary)
GCC_SWITCHES_LIBRARY :=
else ifeq ($(LIBRARY_NAME),core)
GCC_SWITCHES_LIBRARY :=
else ifeq ($(LIBRARY_NAME),cpu)
GCC_SWITCHES_LIBRARY :=
else ifeq ($(LIBRARY_NAME),platform)
GCC_SWITCHES_LIBRARY := $(GCC_SWITCHES_LOWLEVEL_PLATFORM)
else
GCC_SWITCHES_LIBRARY :=
endif

$(OBJ_DIRECTORY)/lib$(LIBRARY_NAME).a: $(OBJECTS)
	$(call brief-command, \
        $(AR) cr $@ $(OBJECTS) \
        ,[AR],$(notdir $@))
	$(call brief-command, \
        $(RANLIB) $@ \
        ,[RANLIB],$(notdir $@))

define compile-gnatmake =
$(call brief-command, \
$(GNATMAKE)                                                   \
            -gnatec=$(KERNEL_PARENT_PATH)/$(GNATADC_FILENAME) \
            -D $(OBJ_DIRECTORY)                               \
            $(GCC_SWITCHES_LIBRARY)                           \
            -c $(INCLUDES) $<                                 \
,[GNATMAKE],$(notdir $<))
endef

define compile-gnatmake-deps =
$(call brief-command, \
$(GNATMAKE_DEPEND)                                                   \
                   -M                                                \
                   -gnatec=$(KERNEL_PARENT_PATH)/$(GNATADC_FILENAME) \
                   -D $(OBJ_DIRECTORY)                               \
                   $(GCC_SWITCHES_LIBRARY)                           \
                   -c $(INCLUDES) $<                                 \
                   > $(DEP_DIRECTORY)/$*.td                          \
,[GNATMAKE-D],$*.d)
endef

%.o: %.adb
$(OBJ_DIRECTORY)/%.o: %.adb $(DEP_DIRECTORY)/%.d
	$(compile-gnatmake)
	$(compile-gnatmake-deps)
ifeq ($(OSTYPE),cmd)
	@$(MV) $(DEP_DIRECTORY_CMD)\$*.td $(DEP_DIRECTORY_CMD)\$*.d
	@adjmakedeps.bat                            \
                         -tap +                     \
                         -kpp $(KERNEL_PARENT_PATH) \
                         $(DEP_DIRECTORY_CMD)\$*.d
	@$(UPDATETM) $(DEP_DIRECTORY_CMD)\$*.ali
	@$(UPDATETM) $(OBJ_DIRECTORY_CMD)\$*.o
else
	@$(MV) $(DEP_DIRECTORY)/$*.td $(DEP_DIRECTORY)/$*.d
ifeq ($(OSTYPE),darwin)
	@sed                                                              \
             -i ''                                                        \
             -e "s|^\(.* : .*\)\$$|\$$(OBJ_DIRECTORY)/\1|"                \
             -e "s| $(KERNEL_PARENT_PATH_SED)| \$$(KERNEL_PARENT_PATH)|g" \
             $(DEP_DIRECTORY)/$*.d
else
	@sed                                                              \
             -i                                                           \
             -e "s|^\(.* : .*\)\$$|\$$(OBJ_DIRECTORY)/\1|"                \
             -e "s| $(KERNEL_PARENT_PATH_SED)| \$$(KERNEL_PARENT_PATH)|g" \
             $(DEP_DIRECTORY)/$*.d
endif
	@$(UPDATETM) $(DEP_DIRECTORY)/$*.ali
	@$(UPDATETM) $(OBJ_DIRECTORY)/$*.o
endif

%.o: %.ads
$(OBJ_DIRECTORY)/%.o: %.ads $(DEP_DIRECTORY)/%.d
	$(compile-gnatmake)
	$(compile-gnatmake-deps)
ifeq ($(OSTYPE),cmd)
	@$(MV) $(DEP_DIRECTORY_CMD)\$*.td $(DEP_DIRECTORY_CMD)\$*.d
	@adjmakedeps.bat                            \
                         -tap +                     \
                         -kpp $(KERNEL_PARENT_PATH) \
                         $(DEP_DIRECTORY_CMD)\$*.d
	@$(UPDATETM) $(DEP_DIRECTORY_CMD)\$*.ali
	@$(UPDATETM) $(OBJ_DIRECTORY_CMD)\$*.o
else
	@$(MV) $(DEP_DIRECTORY)/$*.td $(DEP_DIRECTORY)/$*.d
ifeq ($(OSTYPE),darwin)
	@sed                                                              \
             -i ''                                                        \
             -e "s|^\(.* : .*\)\$$|\$$(OBJ_DIRECTORY)/\1|"                \
             -e "s| $(KERNEL_PARENT_PATH_SED)| \$$(KERNEL_PARENT_PATH)|g" \
             $(DEP_DIRECTORY)/$*.d
else
	@sed                                                              \
             -i                                                           \
             -e "s|^\(.* : .*\)\$$|\$$(OBJ_DIRECTORY)/\1|"                \
             -e "s| $(KERNEL_PARENT_PATH_SED)| \$$(KERNEL_PARENT_PATH)|g" \
             $(DEP_DIRECTORY)/$*.d
endif
	@$(UPDATETM) $(DEP_DIRECTORY)/$*.ali
	@$(UPDATETM) $(OBJ_DIRECTORY)/$*.o
endif

define compile-asmcpp =
$(call brief-command, \
$(CC)                            \
      -o $@                      \
      -MT $@ -MMD -MP            \
      -MF $(DEP_DIRECTORY)/$*.td \
      $(GCC_SWITCHES_LIBRARY)    \
      -c $(INCLUDES) $<          \
,[CC/AS],$(notdir $<))
endef

%.o: %.S
$(OBJ_DIRECTORY)/%.o: %.S $(DEP_DIRECTORY)/%.d
	$(compile-asmcpp)
ifeq ($(OSTYPE),cmd)
	@$(MV) $(DEP_DIRECTORY_CMD)\$*.td $(DEP_DIRECTORY_CMD)\$*.d
	@adjmakedeps.bat                            \
                         -tap $(OBJ_DIRECTORY)      \
                         -kpp $(KERNEL_PARENT_PATH) \
                         $(DEP_DIRECTORY_CMD)\$*.d
	@$(UPDATETM) $(OBJ_DIRECTORY_CMD)\$*.o
else
	@$(MV) $(DEP_DIRECTORY)/$*.td $(DEP_DIRECTORY)/$*.d
ifeq ($(OSTYPE),darwin)
	@sed                                                                           \
             -i ''                                                                     \
             -e "s|^$(OBJ_DIRECTORY_SED)\(.* *: .*\)\$$|\$$(OBJ_DIRECTORY)\1|"         \
             -e "s|^$(KERNEL_PARENT_PATH_SED)\(/[^ :]*\)|\$$(KERNEL_PARENT_PATH)\1|g"  \
             -e "s| $(KERNEL_PARENT_PATH_SED)\(/[^ :]*\)| \$$(KERNEL_PARENT_PATH)\1|g" \
             $(DEP_DIRECTORY)/$*.d
else
	@sed                                                                           \
             -i                                                                        \
             -e "s|^$(OBJ_DIRECTORY_SED)\(.* *: .*\)\$$|\$$(OBJ_DIRECTORY)\1|"         \
             -e "s|^$(KERNEL_PARENT_PATH_SED)\(/[^ :]*\)|\$$(KERNEL_PARENT_PATH)\1|g"  \
             -e "s| $(KERNEL_PARENT_PATH_SED)\(/[^ :]*\)| \$$(KERNEL_PARENT_PATH)\1|g" \
             $(DEP_DIRECTORY)/$*.d
endif
	@$(UPDATETM) $(OBJ_DIRECTORY)/$*.o
endif

%.o: %.c
$(OBJ_DIRECTORY)/%.o: %.c $(DEP_DIRECTORY)/%.d
	$(compile-asmcpp)
ifeq ($(OSTYPE),cmd)
	@$(MV) $(DEP_DIRECTORY_CMD)\$*.td $(DEP_DIRECTORY_CMD)\$*.d
	@adjmakedeps.bat                            \
                         -tap $(OBJ_DIRECTORY)      \
                         -kpp $(KERNEL_PARENT_PATH) \
                         $(DEP_DIRECTORY_CMD)\$*.d
	@$(UPDATETM) $(OBJ_DIRECTORY_CMD)\$*.o
else
	@$(MV) $(DEP_DIRECTORY)/$*.td $(DEP_DIRECTORY)/$*.d
ifeq ($(OSTYPE),darwin)
	@sed                                                                           \
             -i ''                                                                     \
             -e "s|^$(OBJ_DIRECTORY_SED)\(.* *: .*\)\$$|\$$(OBJ_DIRECTORY)\1|"         \
             -e "s|^$(KERNEL_PARENT_PATH_SED)\(/[^ :]*\)|\$$(KERNEL_PARENT_PATH)\1|g"  \
             -e "s| $(KERNEL_PARENT_PATH_SED)\(/[^ :]*\)| \$$(KERNEL_PARENT_PATH)\1|g" \
             $(DEP_DIRECTORY)/$*.d
else
	@sed                                                                           \
             -i                                                                        \
             -e "s|^$(OBJ_DIRECTORY_SED)\(.* *: .*\)\$$|\$$(OBJ_DIRECTORY)\1|"         \
             -e "s|^$(KERNEL_PARENT_PATH_SED)\(/[^ :]*\)|\$$(KERNEL_PARENT_PATH)\1|g"  \
             -e "s| $(KERNEL_PARENT_PATH_SED)\(/[^ :]*\)| \$$(KERNEL_PARENT_PATH)\1|g" \
             $(DEP_DIRECTORY)/$*.d
endif
	@$(UPDATETM) $(OBJ_DIRECTORY)/$*.o
endif

DEP_FILES := $(OBJECTS:%.o=%.d)

$(DEP_FILES):

include $(wildcard $(DEP_FILES))

else ifeq ($(BUILD_MODE),GPRbuild)

#
# GPRbuild
#

export GPR_INCLUDES := $(foreach d,$(INCLUDE_DIRECTORIES),$(KERNEL_PARENT_PATH)/$(d))

.PHONY: FORCE
FORCE:

$(LIB_DIRECTORY)/lib$(LIBRARY_NAME).a: FORCE
	$(call brief-command, \
        $(GPRBUILD)                           \
                    -aP $(KERNEL_PARENT_PATH) \
                    -P $(LIBRARY_NAME).gpr    \
        ,[GPRBUILD-L],$(LIBRARY_NAME).gpr)
ifeq ($(OSTYPE),cmd)
	@IF NOT EXIST $(LIB_DIRECTORY_CMD)\lib$(LIBRARY_NAME).a \
          $(call create-emptyfile,$(LIB_DIRECTORY_CMD)\lib$(LIBRARY_NAME).a)
else
	@if [ ! -e $(LIB_DIRECTORY)/lib$(LIBRARY_NAME).a ] ; then \
          $(call create-emptyfile,$(LIB_DIRECTORY)/lib$(LIBRARY_NAME).a) ; \
        fi
endif

$(OBJ_DIRECTORY)/lib$(LIBRARY_NAME).a: $(LIB_DIRECTORY)/lib$(LIBRARY_NAME).a
ifeq ($(OSTYPE),cmd)
	$(call brief-command, \
        $(CP) $(LIB_DIRECTORY_CMD)\lib$(LIBRARY_NAME).a $(OBJ_DIRECTORY_CMD)\ \
        ,[COPYOBJLIB],$(notdir $@))
else
	$(call brief-command, \
        $(CP) $(LIB_DIRECTORY)/lib$(LIBRARY_NAME).a $(OBJ_DIRECTORY)/ \
        ,[COPYOBJLIB],$(notdir $@))
endif

endif

